
import java.util.Random;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

class Pet {
    private String id;
    private String name;
    private String type;
    private int age;
    private int price;
    Pet(String id, String name, String type, int age, int price) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.age = age;
        this.price = price;
    }
    public String getId() {
        return id;
    }
    public String getName() {
        return name;
    }
    public String getType() {
        return type;
    }
    public String getAge() {
        String a = String.valueOf(age);
        return a;
    }
    public String getPrice() {
        String p = String.valueOf(price);
        return p;
    }
}

class Node {
    private Pet data;
    private Node next, prev;  
    Node(Pet data) {
        this.data = data;
    }    
    public void setNext(Node n) {
        next = n;
    }
    public Node getNext() {
        return next;
    }
    public void setPrev(Node n) {
        prev = n;
    }
    public Node getPrev() {
        return prev;
    }
    public Pet getData() {
        return data;
    }
}

class MyList {
    private Node head;
    private Node tail;
    private int count;
    public Node getHead() {
        return head;
    }
    public Node getTail() {
        return tail;
    }
    public int getCount() {
        return count;
    }
    public void addFirst(Node n) {
        if (tail == null) {
            head = n;
            tail = n;
            count += 1;
        } else {
            n.setNext(head);
            head.setPrev(n);
            head = n;
            count += 1;
        }
    }
    public void deleteFirst() {
        if (tail == null) {
            System.out.println("Error this list is emtpy");
        } else {
            head = head.getNext();
            head.setPrev(null);
        }
    }
}

class Stack {
    private Node data;
    private Node top;
    private Node bottom;
    private int count;
    public Node getTop() {
        return top;
    }
    public int getCount() {
        return count;
    }
    public void push(Node n) {
        if (top == null) {
            top = n;
            bottom = n;
            count += 1;
        } else {
            top.setNext(n);
            n.setPrev(top);
            top = n;
            count += 1;
        }
    }
    public Node pop() {
        if (top == null) {
            System.out.println("Error this list is emtpy");
            return null;
        } else {
            Node result = top;
            result.setPrev(null);
            top = top.getPrev();
            top.setNext(null);
            return result;
        }
    }
}

public class Midterm_lab extends javax.swing.JFrame {
    MyList list = new MyList(); //Object List
    Stack stack = new Stack(); //Object Stack
    Node tmpData = null;
    int totalDog = 0;
    int totalCat = 0;
    String[] header = {"ID" , "Name", "Type", "Age", "Price"};
    Object[][] objDog = new Object[1000][5];
    Object[][] objCat = new Object[100][5];
    public Pet generate() {
        Random random = new Random();
        String allChar = "ABCDEFGHIGKLMNOPQRSTUVWXYZ0123456789";
        String[] typePet = {"Dog", "Cat"};
        String id = "";
        //Generate ID 
        for (int i = 0; i < 4; i++) {
            id += allChar.charAt(random.nextInt(36));
        }
        String name = "";
        //Generate Name
        for (int i = 0 ; i < random.nextInt(3,11); i++) { // Random 3 - 10 Char
            name += allChar.charAt(random.nextInt(26));
        }
        String type = "";
        //Random typePet (Dog or Cat)
        type = typePet[random.nextInt(2)];
        int age = random.nextInt(1,11); // Age 1-10
        int price = random.nextInt(1000,100001); // Price 1000-100000
        //Object
        Pet data = new Pet(id , name, type, age, price);
        return data;
    }
    
    public Midterm_lab() {
        setTitle("660710177 - สุวพิชญ์ อาษา : Midterm");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Generate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Assign");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Takeout");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Age", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Age", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField1))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(42, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Pet data = generate();
        tmpData = new Node(data);
        jTextField1.setText("ID : " + data.getId() + " Name : " + data.getName() + " Type : " + data.getType() 
        + " Age : " + data.getAge() + " Price : " + data.getPrice());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (tmpData.getData().getType().equals("Cat")) {
            list.addFirst(tmpData);
            objCat[totalCat][0] = list.getHead().getData().getId();
            objCat[totalCat][1] = list.getHead().getData().getName();
            objCat[totalCat][2] = list.getHead().getData().getType();
            objCat[totalCat][3] = list.getHead().getData().getAge();
            objCat[totalCat][4] = list.getHead().getData().getPrice();
            totalCat += 1;
            DefaultTableModel model = new DefaultTableModel(objCat, header);
            jTable1.setModel(model);
        } else {
            stack.push(tmpData);
            objDog[totalDog][0] = stack.getTop().getData().getId();
            objDog[totalDog][1] = stack.getTop().getData().getName();
            objDog[totalDog][2] = stack.getTop().getData().getType();
            objDog[totalDog][3] = stack.getTop().getData().getAge();
            objDog[totalDog][4] = stack.getTop().getData().getPrice();
            totalDog += 1;
            DefaultTableModel model = new DefaultTableModel(objDog, header);
            jTable3.setModel(model);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (totalCat >= totalDog) {
            list.deleteFirst();
            objCat[totalCat][0] = null;
            objCat[totalCat][1] = null;
            objCat[totalCat][2] = null;
            objCat[totalCat][3] = null;
            objCat[totalCat][4] = null;
            totalCat -= 1;
            DefaultTableModel model = new DefaultTableModel(objCat, header);
            jTable1.setModel(model);
        } else {
            totalDog -= 1;
            for (int i = 0; i < 5; i++) {
                objDog[totalDog][i] = null;
            }
            DefaultTableModel model = new DefaultTableModel(objDog, header);
            jTable3.setModel(model);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Midterm_lab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Midterm_lab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Midterm_lab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Midterm_lab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Midterm_lab().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
